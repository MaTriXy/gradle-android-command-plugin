buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
        // To depend on the deployed version of the plugin add the following line here:
//        classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
    }
}
apply plugin: 'com.android.application'
// apply android-command AFTER android plugin
apply plugin: 'android-command'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion '22.0.1'

    defaultConfig {
        versionCode 1
        versionName 'v0.0.1'

        minSdkVersion 14
        targetSdkVersion 19
    }

    buildTypes {
        debug 
        release
        QA
    }

    productFlavors {

        flavorDimensions 'pricing', 'releaseType'

        beta {
            flavorDimension 'releaseType'
        }

        normal {
            flavorDimension 'releaseType'
        }

        free {
            flavorDimension 'pricing'
        }

        paid {
            flavorDimension 'pricing'
        }
    }

    // change APK name to include the version name
    applicationVariants.all { variant ->
        def file = variant.outputs[0].packageApplication.outputFile
        variant.outputs[0].packageApplication.outputFile = new File(file.parent, file.name.replace('.apk', "-${defaultConfig.versionName}.apk"))
    }

    command {
        deviceId {
            def apiLevel = defaultConfig.minSdkVersion.getApiLevel()
            def minSdkDevice = devices().find { it.sdkVersion() >= apiLevel }
            if (!minSdkDevice) {
                throw new IllegalStateException("No device found running android version >= ${apiLevel}")
            }
            minSdkDevice.id
        }

        events 1000
        categories = ['android.intent.category.ONLY_ME']
        sortBySubtasks false


        task('runAmazon', com.novoda.gradle.command.Run) {
            deviceId {
                def kindle = devices().find { it.brand() == 'Amazon' }
                if (!kindle) {
                    throw new GroovyRuntimeException('No Amazon device found')
                }
                kindle.id
            }
        }

        task('runNewest', com.novoda.gradle.command.Run, ['installDevice']) {
            deviceId {
                def device = devices().max { it.sdkVersion() }
                device.id
            }
        }

        task autoLogin(type: com.novoda.gradle.command.Input) {
            script {
                2.times {
                    text 'bob'
                    enter()
                }
                enter()
            }
        }

        task listDevices << {
            println()
            println 'Attached devices:'
            devices().each {
                println it
            }
        }

        task('installFromGooglePlay', com.novoda.gradle.command.Install) {
            customFlags {
                return ['-i', 'com.android.vending']
            }
        }
        
        task dumpActivityStack(type: com.novoda.gradle.command.ActivityStack) {
        }
    }
}

/**
* Uses the Files task type to backup photos on the device to
* some local directory.
* Only pulls files that are not yet backed up.
*/
task syncPhotos(type: com.novoda.gradle.command.Files) {
    deviceId {
        def moto = android.command.devices().find { it.brand() == 'motorola' }
        if (!moto) {
            throw new GroovyRuntimeException('No Motorola device found')
        }
        moto.id
    }
    script {
        def deviceImageDir = '/sdcard/DCIM/Camera/'
        def backupDir = mkdir('motoPhoto')

        list(deviceImageDir).findAll { image ->
            image.name.endsWith('jpg') && !image.name.contains(':nopm:') 
        }
        .findAll { image -> 
            !new File(backupDir.path, image.name).exists() 
        }
        .each { image ->
            println image
            pull image.path + image.name, backupDir.path
        }
    }
}


